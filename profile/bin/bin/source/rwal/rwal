#! /bin/bash

# dependencies: wal, mapfile

# Gets the script working directory.
if [ -f $0 ]; then
	WORKING_DIRECTORY=$(dirname $(readlink $0))
else
	WORKING_DIRECTORY=$(dirname $0)
fi


# Defines the path of some important directories (needed by the script).
TEMPLATE_DIRECTORY=$WORKING_DIRECTORY/templates
RUNNER_DIRECTORY=$WORKING_DIRECTORY/runners

# `pywal` (usually) puts the colorschemes files at `.cache/wal`
# in the home folder. The `colors` file contains a very basic
# "structure" (one RGB color per line).
WAL_COLORS=$HOME/.cache/wal/colors

# Defines the path of wallpaper directory.
WALLPAPER_DIRECTORY=$HOME/Images/wp

# Creates an array containing every single file of the
# wallpaper directory (i.e.: all the wallpapers).
WALLPAPER_ARRAY=($WALLPAPER_DIRECTORY/*)

# Generates a random number (where the maximum number is the quantity
# of wallpapers available in the wallpaper directory) and then selects
# a wallpaper using that number as the index within the array.
RAND=$[ $RANDOM % ${#WALLPAPER_ARRAY[@]} ]
RANDOM_WALLPAPER=${WALLPAPER_ARRAY[$RAND]}

# Generates a new colorscheme based on the previous randomly picked
# wallpaper.
$HOME/.local/bin/wal -t -i "$RANDOM_WALLPAPER"
echo $?

# Creates an array with each color generated by `pywal`.
mapfile -t COLOR_ARRAY < $WAL_COLORS

# Defines one (very explicit) variable for each color within the
# previously created array. These variables will be used inside
# the "runners" scripts.
WAL_BLACK=${COLOR_ARRAY[0]}
WAL_RED=${COLOR_ARRAY[1]}
WAL_GREEN=${COLOR_ARRAY[2]}
WAL_YELLOW=${COLOR_ARRAY[3]}
WAL_BLUE=${COLOR_ARRAY[4]}
WAL_MAGENTA=${COLOR_ARRAY[5]}
WAL_CYAN=${COLOR_ARRAY[6]}
WAL_WHITE=${COLOR_ARRAY[7]}

# Runs the "runners".
source $RUNNER_DIRECTORY/rofi
source $RUNNER_DIRECTORY/bumblebee
source $RUNNER_DIRECTORY/i3

# Reload i3's configuration file
i3-msg reload
